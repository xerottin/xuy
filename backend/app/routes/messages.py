from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from ..database import get_db
from ..models.user import User
from ..models.message import Message
from ..schemas.message import MessageCreate, Message as MessageSchema
from ..deps import get_current_active_user
from ..bot.bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞

router = APIRouter(prefix="/messages", tags=["messages"])

@router.post("", response_model=MessageSchema)
async def send_message(
    message: MessageCreate,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient = db.query(User).filter(User.id == message.recipient_id).first()
    if not recipient:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Recipient not found"
        )

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    db_message = Message(
        content=message.content,
        sender_id=current_user.id,
        recipient_id=message.recipient_id
    )
    db.add(db_message)
    db.commit()
    db.refresh(db_message)

    # –ï—Å–ª–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –µ—Å—Ç—å Telegram ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    if recipient.telegram_id:
        try:
            telegram_message = await bot.send_message(
                chat_id=recipient.telegram_id,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {current_user.username}:\n{message.content}"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
            db_message.telegram_message_id = str(telegram_message.message_id)
            db.commit()
        except Exception as e:
            print(f"Error sending telegram message: {e}")
            # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î

    return db_message

@router.get("", response_model=List[MessageSchema])
async def get_messages(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    messages = db.query(Message).filter(
        (Message.sender_id == current_user.id) | 
        (Message.recipient_id == current_user.id)
    ).order_by(Message.created_at.desc()).all()
    return messages

@router.get("/chat/{user_id}", response_model=List[MessageSchema])
async def get_chat_messages(
    user_id: int,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    messages = db.query(Message).filter(
        (
            (Message.sender_id == current_user.id) & 
            (Message.recipient_id == user_id)
        ) | (
            (Message.sender_id == user_id) & 
            (Message.recipient_id == current_user.id)
        )
    ).order_by(Message.created_at.desc()).all()
    return messages 

@router.get("/stats", response_model=dict)
async def get_message_stats(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    total_messages = db.query(Message).filter(
        (Message.sender_id == current_user.id) | 
        (Message.recipient_id == current_user.id)
    ).count()
    
    return {
        "total_messages": total_messages
    }

@router.post("/send-bot-message")
async def send_bot_message(
    message: str,
    recipient_id: int,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        print(f"Attempting to send message to recipient {recipient_id}")
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient = db.query(User).filter(User.id == recipient_id).first()
        if not recipient:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            
        print(f"Recipient found: {recipient.username}, telegram_id: {recipient.telegram_id}")
        if not recipient.telegram_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Telegram"
            )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        print("Sending message via bot...")
        await bot.send_message(
            chat_id=recipient.telegram_id,
            text=f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {current_user.username}:\n\n{message}"
        )
        print("Message sent successfully")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_message = Message(
            content=message,
            sender_id=current_user.id,
            recipient_id=recipient_id
        )
        db.add(db_message)
        db.commit()
        
        return {"status": "success", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
    except Exception as e:
        print(f"Error sending message: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.get("/users", response_model=List[dict])
async def get_users_for_messages(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        print("Getting users for messages...")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º Telegram
        users = db.query(User).filter(
            User.id != current_user.id,  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User.telegram_id.isnot(None)  # –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º Telegram
        ).all()
        
        result = [{"id": user.id, "username": user.username} for user in users]
        print(f"Found {len(result)} users:", result)
        return result
    except Exception as e:
        print(f"Error getting users: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )